---
const pathname = Astro.url.pathname;
import { getCollection } from "astro:content";
import { createPath, isActivePath } from '../utils/paths';

// Get content from collections
const allBlog = await getCollection("blog");
const allProjects = await getCollection("projects");
const allRandom = await getCollection("random");

// Transform to navbar format
const blog = allBlog
  .filter(blog => !blog.data.private)
  .map((blog) => ({
    label: blog.data.title,
    href: `/blog/${blog.id.replace(/\.mdx?$/, '')}`
  })).sort((a, b) => a.label.localeCompare(b.label));

const projects = allProjects
  .filter(project => !project.data.private)
  .map((project) => ({
    label: project.data.title,
    href: `/projects/${project.id.replace(/\.mdx?$/, '')}`
  })).sort((a, b) => a.label.localeCompare(b.label));

  const random = allRandom
  .filter(item => !item.data.private)
  .map((item) => ({
  label: item.data.title,
  href: `/random/${item.id.replace(/\.mdx?$/, '')}`
})).sort((a, b) => a.label.localeCompare(b.label));

const sections = [
{ label: 'Blog', base: createPath('/blog'), children: blog },
{ label: 'Projects', base: createPath('/projects'), children: projects },
{ label: 'Readings', base: createPath('/readings'), children: [] },
{ label: 'References', base: createPath('/references'), children: [] },
{ label: 'Random Stuff', base: createPath('/random'), children: random },
];
function isActive(href) {
  return isActivePath(pathname, href);
}
const activeSection = sections.find((s) => pathname === s.base || pathname.startsWith(s.base + '/'));
const showSub = activeSection && activeSection.children && activeSection.children.length > 0;
---
<div class="flex h-full flex-col shadow-md">
  <div class="flex items-center gap-3 p-4 text-xl font-extrabold tracking-tight border-b border-gray-200">
    <button 
      id="burger" 
      class="p-2 rounded-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-gray-200" 
      aria-label="Toggle navigation menu"
      type="button"
    >
      <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
      </svg>
    </button>
  </div>
  <nav class="flex-1 overflow-y-auto p-2">
    <div class="mb-4 space-y-2 nav-fixed">
        <a href={createPath('/')} title="Home" class={`truncate-ell has-tooltip rounded px-3 py-2 text-sm ${pathname===createPath('/') ? 'bg-gray-200 text-text-black-200' : 'hover:bg-gray-100'}`}>Home</a>
      <ul class="space-y-1">
        {sections.map((s) => (
          <li>
            <a href={s.base} title={s.label} data-title={s.label} class={`truncate-ell has-tooltip rounded px-3 py-2 text-sm hover:bg-gray-100 ${pathname===s.base ? 'bg-gray-200 text-black-200' : ''}`}>{s.label}</a>
          </li>
        ))}
      </ul>
    </div>
    <div class="my-4 flex justify-center nav-fixed" aria-hidden="true">
      <div class="h-px w-4/5 bg-gray-200"></div>
    </div>
    {showSub && (
      <div class="space-y-1 nav-fixed">
        <ul class="space-y-1">
          {activeSection.children.map((c) => (
            <li>
                <a href={createPath(c.href)} title={c.label} data-title={c.label} class={`truncate-ell has-tooltip relative rounded px-3 py-1.5 text-sm hover:bg-gray-100 ${isActive(createPath(c.href)) ? 'bg-gray-200 text-black-200' : ''}`}>{c.label}</a>
            </li>
          ))}
        </ul>
      </div>
    )}
  </nav>
</div>
