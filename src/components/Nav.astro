---
const pathname = Astro.url.pathname;
import type { AstroIntegrationLogger } from "astro";
// Indexing subsections
const books = Object.entries(import.meta.glob('../pages/books/**/*.astro', { eager: true }))
  .filter(([p]) => !/\/(index|\[.*\])\.astro$/.test(p))
  .map(([p, m]: any) => ({ label: m?.meta?.title ?? p.replace(/^.*\/(.*)\.astro$/, '$1'), href: p.replace(/^\.\.\/(pages\/)?/, '/').replace(/\.astro$/, '') }))
  .sort((a, b) => a.label.localeCompare(b.label));
const projects = Object.entries(import.meta.glob('../pages/projects/**/*.astro', { eager: true }))
  .filter(([p]) => !/\/(index|\[.*\])\.astro$/.test(p))
  .map(([p, m]: any) => ({ label: m?.meta?.title ?? p.replace(/^.*\/(.*)\.astro$/, '$1'), href: p.replace(/^\.\.\/(pages\/)?/, '/').replace(/\.astro$/, '') }))
  .sort((a, b) => a.label.localeCompare(b.label));
const blog = Object.entries(import.meta.glob('../pages/blog/**/*.astro', { eager: true }))
  .filter(([p]) => !/\/(index|\[.*\])\.astro$/.test(p))
  .map(([p, m]: any) => ({ label: m?.meta?.title ?? p.replace(/^.*\/(.*)\.astro$/, '$1'), href: p.replace(/^\.\.\/(pages\/)?/, '/').replace(/\.astro$/, '') }))
  .sort((a, b) => a.label.localeCompare(b.label));

const pageRoot = '/web/'
const sections = [
{ label: 'Books', base: `${pageRoot}books`, children: books },
  { label: 'Projects', base: `${pageRoot}projects`, children: projects },
  { label: 'References', base: `${pageRoot}references`, children: [] },
  { label: 'Blog', base: `${pageRoot}blog`, children: blog },
];
function isActive(href) {
  return pathname === href || pathname.startsWith(href + '/');
}
const activeSection = sections.find((s) => pathname === s.base || pathname.startsWith(s.base + '/'));
const showSub = activeSection && activeSection.children && activeSection.children.length > 0;
---
<div class="flex h-full flex-col shadow-md">
  <div class="flex items-center gap-3 p-4 text-xl font-extrabold tracking-tight border-b border-gray-200">
    <button 
      id="burger" 
      class="p-2 rounded-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-[#0b3828]" 
      aria-label="Toggle navigation menu"
      type="button"
    >
      <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
      </svg>
    </button>
  </div>
  <nav class="flex-1 overflow-y-auto p-2">
    <div class="mb-4 space-y-2 nav-fixed">
      <a href="/" title="Home" class={`truncate-ell has-tooltip rounded px-3 py-2 text-sm ${pathname==='/' ? 'bg-[#0b3828]/10 text-[#0b3828]' : 'hover:bg-gray-100'}`}>Home</a>
      <ul class="space-y-1">
        {sections.map((s) => (
          <li>
            <a href=`${s.base}` title={s.label} data-title={s.label} class={`truncate-ell has-tooltip rounded px-3 py-2 text-sm hover:bg-gray-100 ${pathname===s.base ? 'bg-[#0b3828]/10 text-[#0b3828]' : ''}`}>{s.label}</a>
          </li>
        ))}
      </ul>
    </div>
    <div class="my-4 flex justify-center nav-fixed" aria-hidden="true">
      <div class="h-px w-4/5 bg-gray-200"></div>
    </div>
    {showSub && (
      <div class="space-y-1 nav-fixed">
        <ul class="space-y-1">
          {activeSection.children.map((c) => (
            <li>
              <a href={c.href} title={c.label} data-title={c.label} class={`truncate-ell has-tooltip relative rounded px-3 py-1.5 text-sm hover:bg-gray-100 ${isActive(c.href) ? 'bg-[#0b3828]/10 text-[#0b3828]' : ''}`}>{c.label}</a>
            </li>
          ))}
        </ul>
      </div>
    )}
  </nav>
</div>
