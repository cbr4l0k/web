---
export interface Goal { label: string; done?: boolean }
export interface Phase { title: string; goals: Goal[] }
export interface Props { phases: Phase[] }
const { phases } = Astro.props as Props;
function progress(goals: Goal[]) {
  const total = goals.length || 1;
  const done = goals.filter(g=>g.done).length;
  return Math.round((done / total) * 100);
}
---
<section class="grid gap-4">
  {phases.map((p) => {
    const pr = progress(p.goals);
    return (
      <details class="rounded border border-gray-200 bg-white p-3 shadow-sm" open={pr<100}>
        <summary class="flex items-center justify-between cursor-pointer select-none">
          <div class="font-semibold text-[#222]">{p.title}</div>
          <div class="flex items-center gap-2 text-xs">
            <div class="w-28 h-2 rounded bg-gray-100 overflow-hidden">
              <div class="h-full bg-gray-600" style={`width:${pr}%`}></div>
            </div>
            <span class="opacity-70">{pr}%</span>
          </div>
        </summary>
        <ul class="mt-3 space-y-2">
          {p.goals.map((g) => (
            <li class="flex items-center gap-2">
              <input type="checkbox" checked={g.done} disabled class="h-3 w-3 rounded border-gray-300" />
              <span class={g.done ? 'line-through opacity-60' : ''}>{g.label}</span>
            </li>
          ))}
        </ul>
      </details>
    );
  })}
</section>
