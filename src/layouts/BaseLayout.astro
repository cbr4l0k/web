---
const { title = 'Site', description = 'Astro site' } = Astro.props as { title?: string; description?: string };
import { createPath } from '../utils/paths';
import '../styles/global.css';
---
<html lang="en" class="h-full" data-theme="light">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title ? `SEW.S | ${title}` : 'SEW.S'}</title>
    <meta name="description" content={description} />
    <link rel="icon" type="image/png" sizes="180x180" href={createPath("apple-touch-icon.png")} />
    <link rel="icon" type="image/png" sizes="16x16" href={createPath("favicon-16x16.png")} />
    <link rel="icon" type="image/png" sizes="32x32" href={createPath("favicon-32x32.png")} />
  </head>
  <body class="h-full" style="background:var(--color-bg); color:var(--color-body);">
    <div class="flex h-screen overflow-hidden">
      <div id="sidebar-backdrop" class="sidebar-backdrop"></div>
      <aside id="sidebar" class="sidebar md:flex md:flex-col md:shrink-0">
        <slot name="nav" />
      </aside>
      <div class="flex flex-1 flex-col min-w-0 main-with-sidebar">
        <header class="header sticky top-0 z-30">
          <slot name="header" />
        </header>
        <main class="flex-1 overflow-y-auto px-6 py-8">
          <div class="container">
            <slot />
          </div>
        </main>
        <footer class="border-t" style="border-color:var(--color-border); background:var(--color-surface);">
          <slot name="footer" />
        </footer>
      </div>
    </div>

    <script>
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');
      const root = document.documentElement;
      function setTheme(mode) {
        root.classList.toggle('dark', mode === 'dark');
        root.setAttribute('data-theme', mode);
        try { localStorage.setItem('theme', mode); } catch {}
      }
      const stored = (()=>{ try { return localStorage.getItem('theme'); } catch { return null; } })();
      setTheme(stored ?? (prefersDark.matches ? 'dark' : 'light'));
      prefersDark.addEventListener('change', (e)=>{
        const manual = (()=>{ try { return localStorage.getItem('theme'); } catch { return null; } })();
        if (!manual) setTheme(e.matches ? 'dark' : 'light');
      });

      const burger = document.getElementById('burger');
      const main = document.querySelector('.main-with-sidebar');
      const sidebar = document.getElementById('sidebar');
      const backdrop = document.getElementById('sidebar-backdrop');
      
      function isMobile() {
        return window.innerWidth <= 768;
      }
      
      function getSidebarState() {
        try { 
          return localStorage.getItem('sidebarCollapsed') === 'true'; 
        } catch { 
          return false; 
        }
      }
      
      function setSidebarState(collapsed) {
        try { 
          localStorage.setItem('sidebarCollapsed', collapsed.toString()); 
        } catch {}
      }
      
      function toggleSidebar() {
        if (isMobile()) {
          // Mobile behavior: overlay sidebar (no persistence needed)
          sidebar.classList.toggle('open');
          backdrop.classList.toggle('show');
        } else {
          // Desktop behavior: collapse to thin bar with persistence
          const isCollapsed = sidebar.classList.toggle('collapsed');
          main?.classList.toggle('expanded');
          setSidebarState(isCollapsed);
        }
      }
      
      // Initialize sidebar state on page load for desktop
      function initializeSidebarState() {
        if (!isMobile() && getSidebarState()) {
          sidebar.classList.add('collapsed');
          main?.classList.add('expanded');
        }
      }
      
      // Initialize on load
      initializeSidebarState();
      
      burger?.addEventListener('click', toggleSidebar);
      backdrop?.addEventListener('click', () => {
        if (isMobile()) {
          sidebar.classList.remove('open');
          backdrop.classList.remove('show');
        }
      });
      
      // Handle window resize to reset states appropriately
      window.addEventListener('resize', () => {
        if (!isMobile()) {
          // Reset mobile classes when switching to desktop
          sidebar.classList.remove('open');
          backdrop.classList.remove('show');
        } else {
          // Reset desktop classes when switching to mobile
          sidebar.classList.remove('collapsed');
          main?.classList.remove('expanded');
        }
      });
    </script>
  </body>
</html>
